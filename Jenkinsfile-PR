pipeline {
    agent any
    stages {
        stage('Pull Request Handling') {
            steps {
                script {
                    def featureBranch = 'feature'  // Replace with your actual feature branch name
                    def mainBranch = 'main'  // Replace with your main branch name
                    
                    // // Checkout main branch
                    // checkout([$class: 'GitSCM', branches: [[name: "refs/remotes/origin/${mainBranch}"]], userRemoteConfigs: [[url: 'https://github.com/ramesh-h24/weather_app.git']]])

                    // Checkout feature branch
                    checkout([$class: 'GitSCM', branches: [[name: "refs/remotes/origin/${featureBranch}"]], userRemoteConfigs: [[url: 'https://github.com/ramesh-h24/weather_app.git']]])

                    // Attempt to merge feature branch into main branch
                    def mergeResult = sh(script: "git merge ${featureBranch} --no-ff", returnStatus: true)

                    if (mergeResult == 0) {
                        echo "Merge successful. Proceeding with pipeline."
                    } else {
                        error "Merge conflict detected. Pipeline aborted."
                    }
                }
            }
        }
        stage('Gated Tests with Timeout') {
            steps {
                timeout(time: 10, unit: 'SECONDS') {
                    echo 'Running gated tests...'
                    // Placeholder for actual tests that might take longer
                    sh 'sleep 15'
                }
            }
        }
    }
    post {
        success {
            echo 'Gated tests passed successfully.'
            // Additional steps if needed
        }

        failure {
            echo 'Gated tests failed or timed out.'
            // Additional steps if needed
        }
    }
}
